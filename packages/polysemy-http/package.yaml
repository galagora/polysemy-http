name: polysemy-http
version: 0.1.0.0
description: Polysemy effect for http-client
license: BSD-2-Clause-Patent
license-file: LICENSE
author: "Torsten Schmits"
maintainer: "tek@tryp.io"
copyright: "2019 Torsten Schmits"
category: Http
build-type: Simple
synopsis: Polysemy effect for http-client

library:
  source-dirs: lib
  other-modules: Prelude

flags:
  dev:
    description: add test dependencies to main project to satisfy ghci(de)
    default: False
    manual: True

dependencies:
  - aeson
  - ansi-terminal
  - base-noprelude
  - bytestring
  - case-insensitive
  - co-log-core
  - co-log-polysemy
  - composition
  - containers
  - data-default
  - either
  - http-client
  - http-client-tls
  - http-conduit
  - http-types
  - lens
  - mono-traversable
  - polysemy
  - relude
  - string-interpolate
  - template-haskell
  - text
  # TODO remove when the flag problem is solved
  - hedgehog
  - servant
  - servant-server
  - servant-client
  - tasty
  - tasty-hedgehog

when:
  - condition: impl(ghcjs)
    then:
      dependencies: []
    else:
      dependencies:
        - polysemy-plugin
      ghc-options:
        - -fplugin=Polysemy.Plugin
        - -O2
        - -flate-specialise
        - -fspecialise-aggressively
  - condition: flag(dev)
    dependencies:
      - hedgehog
      - servant
      - servant-server
      - servant-client
      - tasty
      - tasty-hedgehog

tests:
  polysemy-http-unit:
    main: Main.hs
    source-dirs: test
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - polysemy-http
      - servant
      - servant-server
      - tasty
      - tasty-hedgehog

default-extensions:
  - AllowAmbiguousTypes
  - ApplicativeDo
  - BangPatterns
  - BinaryLiterals
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingVia
  - DoAndIfThenElse
  - EmptyDataDecls
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedStrings
  - PackageImports
  - PartialTypeSignatures
  - PatternGuards
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - TypeSynonymInstances
  - UndecidableInstances
  - UnicodeSyntax
  - ViewPatterns
